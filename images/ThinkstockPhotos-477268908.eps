%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\704\745\755\750\761) ()
%%Title: (ve-2064.eps)
%%CreationDate: 3/4/2015 6:37 PM
%%BoundingBox: 9 9 759 759
%%HiResBoundingBox: 9.12061 9.11914 758.8799 758.8794
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 384 384 384 384
%AI3_TileBox: 85.8398 -36.46 681.1602 805.46
%AI3_DocumentPreview: Header
%AI5_ArtSize: 768 768
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -387.5 827.5 1 1575 941 26 0 0 62 61 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 43 42 41 0 100 Lb
(1) Ln
0 A
u
0 O
0.023529 0.015686 0.015686 0 0.964706 0.964706 0.964706 Xa
0 J 0 j 1 w 4 M []0 d1 XR
9.12061 758.8789 m
190.7886 758.8789 L
190.7886 515.8237 L
9.12061 515.8237 L
9.12061 758.8789 L
f
198.4849 758.8789 m
380.1533 758.8789 L
380.1533 515.8237 L
198.4849 515.8237 L
198.4849 758.8789 L
f
387.8486 758.8789 m
569.5166 758.8789 L
569.5166 515.8237 L
387.8486 515.8237 L
387.8486 758.8789 L
f
577.2129 758.8794 m
758.8799 758.8794 L
758.8799 262.4717 L
577.2129 262.4717 L
577.2129 758.8794 L
f
9.12061 505.5269 m
190.7886 505.5269 L
190.7886 262.4717 L
9.12061 262.4717 L
9.12061 505.5269 L
f
198.4849 505.5269 m
380.1533 505.5269 L
380.1533 262.4717 L
198.4849 262.4717 L
198.4849 505.5269 L
f
387.8486 505.5269 m
569.5166 505.5269 L
569.5166 262.4717 L
387.8486 262.4717 L
387.8486 505.5269 L
f
9.12061 252.1748 m
190.7886 252.1748 L
190.7886 9.11914 L
9.12061 9.11914 L
9.12061 252.1748 L
f
198.4849 252.1748 m
380.1533 252.1748 L
380.1533 9.11914 L
198.4849 9.11914 L
198.4849 252.1748 L
f
387.8486 252.1748 m
569.5166 252.1748 L
569.5166 9.11914 L
387.8486 9.11914 L
387.8486 252.1748 L
f
577.2129 252.1748 m
758.8799 252.1748 L
758.8799 9.11914 L
577.2129 9.11914 L
577.2129 252.1748 L
f
*u
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
75.1157 731.0708 m
99.9541 731.0708 L
124.792 731.0708 L
128.2505 731.0708 131.0806 728.2412 131.0806 724.7822 c
131.0806 720.1523 l
131.0806 719.5762 130.9346 719.1387 130.6138 718.751 c
128.9468 716.7388 128.9668 713.5894 130.2788 711.3496 C
130.7354 710.5708 131 709.9429 131 708.272 c
131 707.4746 130.8296 706.7627 130.6167 706.1831 c
130.3774 705.5313 130.2676 705.1221 130.2676 704.5112 C
130.2676 668.7998 L
130.2676 667.8491 130.7109 667.5996 130.7109 666.7856 C
130.7109 664.2432 l
130.7109 663.4805 130.458 662.7451 129.9956 662.1445 C
127.9429 659.3657 128.7837 657.208 130.0923 655.2227 c
130.4502 654.6797 130.5752 653.9956 130.5752 653.3027 c
130.5752 651.978 l
130.5752 648.8623 128.3779 646.8003 126.1333 645.2905 C
115.9854 639.3906 L
119.7881 639.3906 L
120.0562 639.3906 120.3213 639.2354 120.3828 638.8877 c
121.2432 634.0347 121.7813 633.5361 124.1523 632.1675 c
129.0947 629.314 131.8877 624.5 131.6406 618.0977 c
130.0767 577.6216 L
128.7158 577.6216 L
128.7158 543.6309 L
122.7935 543.6309 L
121.3364 572.2944 L
99.9541 576.1455 L
78.5718 572.2944 L
77.1143 543.6309 L
71.1924 543.6309 L
71.1924 577.6216 L
69.8315 577.6216 L
68.2676 618.0977 l
68.0205 624.5 70.8135 629.314 75.7559 632.1675 c
78.1265 633.5361 78.665 634.0347 79.5249 638.8877 c
79.5864 639.2354 79.8516 639.3906 80.1201 639.3906 C
83.9224 639.3906 L
73.7749 645.2905 L
71.5303 646.8003 69.3325 648.8623 69.3325 651.978 c
69.3325 653.3027 l
69.3325 653.9956 69.458 654.6797 69.8159 655.2227 c
71.1245 657.208 71.9648 659.3657 69.9121 662.1445 C
69.4502 662.7451 69.1973 663.4805 69.1973 664.2432 c
69.1973 666.7856 L
69.1973 667.5996 69.6401 667.8491 69.6401 668.7998 C
69.6401 704.5112 L
69.6401 705.1221 69.5303 705.5313 69.291 706.1831 c
69.0781 706.7627 68.9082 707.4746 68.9082 708.272 c
68.9082 709.9429 69.1729 710.5708 69.6289 711.3496 C
70.9414 713.5894 70.9609 716.7388 69.2939 718.751 c
68.9731 719.1387 68.8276 719.5762 68.8276 720.1523 c
68.8276 724.7822 l
68.8276 728.2412 71.6572 731.0708 75.1157 731.0708 C
75.1157 731.0708 L
f
1 D
94.4463 701.7227 m
96.0796 701.6479 96.4194 701.0747 96.4785 699.4194 c
96.5278 698.0313 96.4419 681.7129 96.2954 679.5195 c
96.1489 677.3271 94.4922 676.0601 92.9331 676.0112 c
91.8154 675.9766 85.4937 675.9238 81.3975 675.6357 c
79.9678 675.5352 79.6943 673.4023 81.4761 673.4956 c
92.3906 674.0684 107.5171 674.0713 118.4321 673.4956 c
120.2139 673.4019 119.9399 675.5352 118.5107 675.6357 c
114.4141 675.9238 108.0928 675.9766 106.9751 676.0112 c
105.4155 676.0601 103.7593 677.3271 103.6128 679.5195 c
103.4668 681.7129 103.3799 698.0313 103.4297 699.4194 c
103.4888 701.0747 103.8281 701.6479 105.4619 701.7227 c
108.6587 701.8696 116.3271 701.8042 118.668 701.7451 c
121.0928 701.6841 121.0811 703.6338 118.9883 703.9976 c
115.3906 704.6226 109.5747 704.9043 99.9541 704.9043 C
90.333 704.9043 84.5176 704.6226 80.9199 703.9976 c
78.8267 703.6338 78.8149 701.6841 81.2402 701.7451 c
83.5811 701.8042 91.249 701.8696 94.4463 701.7227 c
94.4463 701.7227 l
f
75.1157 727.3257 m
73.7241 727.3257 72.5728 726.1738 72.5728 724.7822 c
72.5728 721.3828 l
72.5728 720.8604 72.6533 720.5376 72.9219 720.0967 c
74.8057 717.0029 74.7393 712.9248 73.0366 709.7695 c
72.5991 708.959 72.479 708.3672 72.8066 707.4746 c
73.1733 706.4751 73.3853 705.5815 73.3853 704.5112 c
73.3853 668.7998 l
73.3853 668.1494 73.2988 667.5947 73.1064 666.9746 c
72.9961 666.6187 72.9424 666.2646 72.9424 665.8911 c
72.9424 665.0684 l
72.9424 664.5576 73.0713 664.1855 73.3501 663.7568 c
75.4683 660.5024 75.3325 657.2441 73.4209 653.9346 c
73.1875 653.5303 73.0776 653.3198 73.0776 652.8496 c
73.0776 651.978 l
73.0776 650.4399 74.5967 649.2593 75.75 648.4756 C
90.1431 640.1064 L
109.7651 640.1064 L
124.1577 648.4756 L
125.3115 649.2593 126.8301 650.4399 126.8301 651.978 c
126.8301 652.8496 l
126.8301 653.3198 126.7207 653.5303 126.4868 653.9346 c
124.5752 657.2441 124.4399 660.5024 126.5581 663.7568 c
126.8369 664.1855 126.9658 664.5576 126.9658 665.0684 c
126.9658 665.8911 l
126.9658 666.2646 126.9121 666.6187 126.8018 666.9746 c
126.6094 667.5947 126.5225 668.1494 126.5225 668.7998 c
126.5225 704.5112 l
126.5225 705.5815 126.7344 706.4751 127.1011 707.4746 c
127.4292 708.3672 127.3091 708.959 126.8716 709.7695 c
125.1689 712.9248 125.1025 717.0029 126.9863 720.0967 c
127.2544 720.5376 127.3354 720.8604 127.3354 721.3828 c
127.3354 724.7822 l
127.3354 726.1738 126.1836 727.3257 124.792 727.3257 c
75.1157 727.3257 l
75.1157 727.3257 l
f
101.771 595.5889 m
103.8262 601.8999 l
103.9526 602.2876 103.7808 602.6489 103.3804 602.6489 c
96.5273 602.6489 l
96.127 602.6489 95.9556 602.2876 96.0815 601.8999 c
98.1367 595.5889 L
96.7344 594.9121 95.7671 593.4771 95.7671 591.8154 c
95.7671 590.1675 96.7197 588.7422 98.1045 588.0591 C
98.459 584.0308 l
98.522 583.3125 99.1475 583.165 99.9541 583.165 C
100.7607 583.165 101.3857 583.3125 101.4492 584.0308 c
101.8042 588.0591 L
103.188 588.7422 104.1411 590.1675 104.1411 591.8154 c
104.1411 593.4771 103.1733 594.9121 101.771 595.5889 C
f
*U
0 D
246.6191 556.8662 m
248.4219 557.9048 L
248.4219 594.981 L
246.6191 595.7339 L
246.6191 607.7378 L
248.4219 608.5928 L
248.4219 626.8672 L
246.6191 627.856 L
246.6191 632.7534 l
246.6191 639.8716 250.8804 644.3091 257.1011 646.4805 C
262.6343 648.4111 268.1675 650.3423 273.7007 652.2734 C
276.4878 653.2456 278.4746 654.9658 278.4746 658.895 C
278.4746 671.3579 L
277.6069 671.3579 l
275.9751 671.3579 274.6401 672.6929 274.6401 674.3247 c
274.6401 676.0073 l
274.6401 676.7139 275.2178 677.2915 275.9243 677.2915 c
277.4419 677.2915 L
277.4419 678.3193 L
276.2729 678.3193 L
276.2729 679.7886 L
277.4419 679.7886 L
277.4419 680.6753 L
272.8945 680.6753 l
272.0298 680.6753 271.3003 681.3838 271.3213 682.249 c
271.4121 686.0093 L
270.1655 686.0093 L
270.3618 690.8618 L
271.5288 690.8618 L
272.1025 714.6855 l
272.1396 716.2305 273.0073 716.498 274.5601 716.6509 C
274.5601 729.7598 l
274.5601 730.481 275.1504 731.0708 275.8716 731.0708 c
295.5796 731.0708 l
296.3008 731.0708 296.8911 730.481 296.8911 729.7598 c
296.8911 716.6509 L
298.4438 716.498 299.3115 716.2305 299.3486 714.6855 c
299.9224 690.8618 L
301.0894 690.8618 L
301.2031 688.0547 L
327.1587 689.1021 L
328.2393 689.1455 328.7168 688.7593 329.0962 687.8872 C
332.0176 681.168 L
327.6504 679.5688 L
325.8979 684.9814 L
300.1226 682.5605 L
300.1299 682.249 l
300.1509 681.3838 299.4214 680.6753 298.5566 680.6753 c
294.0093 680.6753 L
294.0093 679.7886 L
295.1782 679.7886 L
295.1782 678.3193 L
294.0093 678.3193 L
294.0093 677.2915 L
295.5264 677.2915 l
296.2329 677.2915 296.811 676.7139 296.811 676.0073 c
296.811 674.3247 l
296.811 672.6929 295.4756 671.3579 293.8442 671.3579 c
292.9766 671.3579 L
292.9766 658.895 L
292.9766 654.9658 294.9634 653.2456 297.7505 652.2734 C
303.2837 650.3423 308.8169 648.4111 314.3501 646.4805 C
320.5708 644.3091 324.832 639.8716 324.832 632.7534 c
324.832 627.856 L
323.0293 626.8672 L
323.0293 608.5928 L
324.832 607.7378 L
324.832 595.7339 L
323.0293 594.981 L
323.0293 557.9048 L
324.832 556.8662 L
324.832 548.0986 l
324.832 545.6411 322.8213 543.6309 320.3638 543.6309 c
285.7256 543.6309 L
251.0869 543.6309 l
248.6294 543.6309 246.6191 545.6411 246.6191 548.0986 c
246.6191 556.8662 L
f
425.9766 561.4688 m
428.4063 562.8682 L
428.4063 612.8384 L
425.9766 613.853 L
425.9766 630.0317 L
428.4063 631.1841 L
428.4063 655.814 L
425.9766 657.146 L
425.9766 663.7466 l
425.9766 673.3403 431.7188 679.3213 440.1035 682.2471 C
447.5605 684.8496 455.0186 687.4521 462.4756 690.0547 C
466.2314 691.3652 468.9092 693.6841 468.9092 698.9795 C
468.9092 711.5605 L
468.5215 711.5605 l
467.9736 711.5605 467.5254 712.0088 467.5254 712.5566 c
467.5254 730.0742 l
467.5254 730.6221 467.9736 731.0703 468.5215 731.0703 c
488.8428 731.0703 l
489.3906 731.0703 489.8389 730.6221 489.8389 730.0742 c
489.8389 712.5566 l
489.8389 712.0088 489.3906 711.5605 488.8428 711.5605 c
488.4551 711.5605 L
488.4551 698.9795 L
488.4551 693.6841 491.1328 691.3652 494.8887 690.0547 C
502.3457 687.4521 509.8037 684.8496 517.2607 682.2471 C
525.6455 679.3213 531.3877 673.3403 531.3877 663.7466 c
531.3877 657.146 L
528.958 655.814 L
528.958 631.1841 L
531.3877 630.0317 L
531.3877 613.853 L
528.958 612.8384 L
528.958 562.8682 L
531.3877 561.4688 L
531.3877 549.6519 l
531.3877 546.3403 528.6787 543.6309 525.3662 543.6309 c
478.6816 543.6309 L
431.9971 543.6309 l
428.6855 543.6309 425.9766 546.3403 425.9766 549.6519 c
425.9766 561.4688 L
f
*u
626.8105 564.4468 m
637.7656 564.4468 L
637.7656 570.1719 l
637.7656 572.9526 640.04 575.2275 642.8203 575.2275 c
658.957 575.2275 L
658.1299 577.8291 656.1738 579.1987 653.6826 580.0679 C
647.0742 582.3745 640.4648 584.6807 633.8564 586.9873 C
626.4258 589.5801 621.3369 594.8809 621.3369 603.3828 c
621.3369 609.2324 L
623.4893 610.4131 L
623.4893 632.2397 L
621.3369 633.2617 L
621.3369 647.5996 L
623.4893 648.498 L
623.4893 692.7827 L
621.3369 694.0234 L
621.3369 704.4951 l
621.3369 707.4302 623.7383 709.8315 626.6729 709.8315 c
709.418 709.8315 l
712.3525 709.8315 714.7539 707.4302 714.7539 704.4951 c
714.7539 694.0234 L
712.6006 692.7827 L
712.6006 648.498 L
714.7539 647.5996 L
714.7539 633.2617 L
712.6006 632.2397 L
712.6006 610.4131 L
714.7539 609.2324 L
714.7539 603.3828 l
714.7539 594.8809 709.665 589.5801 702.2344 586.9873 C
695.626 584.6807 689.0166 582.3745 682.4082 580.0679 C
679.917 579.1987 677.9609 577.8291 677.1338 575.2275 C
693.2705 575.2275 l
696.0508 575.2275 698.3252 572.9526 698.3252 570.1719 c
698.3252 564.4468 L
709.2803 564.4468 l
714.4541 564.4468 718.6865 560.2139 718.6865 555.0405 c
718.6865 311.5215 L
705.1299 311.5215 L
705.1299 316.5361 L
630.9609 316.5361 L
630.9609 311.5215 L
617.4043 311.5215 L
617.4043 555.0405 l
617.4043 560.2139 621.6367 564.4468 626.8105 564.4468 c
626.8105 564.4468 l
f
1 D
668.0459 534.6279 m
647.6836 534.6279 631.0225 517.9683 631.0225 497.6055 c
631.0225 427.0527 L
705.0684 427.0527 L
705.0684 497.6055 l
705.0684 517.9678 688.4082 534.6279 668.0459 534.6279 c
668.0459 534.6279 l
f
660.3564 500.9702 m
653.6465 500.9702 646.9346 500.9702 640.2246 500.9702 C
640.2246 471.8848 L
640.2246 469.105 641.3516 466.5884 643.1729 464.7671 C
644.9941 462.9453 647.5107 461.8184 650.29 461.8184 C
653.0703 461.8184 655.5869 462.9453 657.4082 464.7671 C
659.2295 466.5884 660.3564 469.105 660.3564 471.8848 C
660.3564 500.9702 L
660.3564 500.9702 L
f
695.8672 500.9702 m
689.1553 500.9702 682.4453 500.9702 675.7344 500.9702 C
675.7344 471.8848 L
675.7344 469.105 676.8613 466.5884 678.6826 464.7671 C
680.5039 462.9453 683.0205 461.8184 685.8008 461.8184 C
688.5801 461.8184 691.0967 462.9453 692.918 464.7671 C
694.7393 466.5884 695.8672 469.105 695.8672 471.8848 C
695.8672 500.9702 L
695.8672 500.9702 L
f
691.1182 490.2036 m
691.1182 477.1714 L
688.3848 477.1714 L
688.3848 472.2095 L
683.2158 472.2095 L
683.2158 477.1714 L
680.4824 477.1714 L
680.4824 490.2036 L
678.1895 490.2036 L
678.1895 471.8848 L
678.1895 469.7832 679.041 467.8799 680.418 466.5029 C
681.7959 465.1255 683.6982 464.2734 685.8008 464.2734 C
687.9023 464.2734 689.8047 465.1255 691.1826 466.5029 C
692.5596 467.8799 693.4111 469.7832 693.4111 471.8848 C
693.4111 490.2036 L
691.1182 490.2036 L
691.1182 490.2036 L
f
678.1895 495.0483 m
683.2158 495.0483 L
683.2158 498.5151 L
678.1895 498.5151 L
678.1895 495.0483 L
678.1895 495.0483 L
f
688.3848 495.0483 m
693.4111 495.0483 L
693.4111 498.5151 L
688.3848 498.5151 L
688.3848 495.0483 L
688.3848 495.0483 L
f
655.6084 490.2036 m
655.6084 477.1714 L
652.875 477.1714 L
652.875 472.2095 L
647.7061 472.2095 L
647.7061 477.1714 L
644.9727 477.1714 L
644.9727 490.2036 L
642.6797 490.2036 L
642.6797 471.8848 L
642.6797 469.7832 643.5313 467.8799 644.9082 466.5029 C
646.2861 465.1255 648.1885 464.2734 650.29 464.2734 C
652.3926 464.2734 654.2949 465.1255 655.6729 466.5029 C
657.0498 467.8799 657.9014 469.7832 657.9014 471.8848 C
657.9014 490.2036 L
655.6084 490.2036 L
655.6084 490.2036 L
f
642.6797 495.0483 m
647.7061 495.0483 L
647.7061 498.5151 L
642.6797 498.5151 L
642.6797 495.0483 L
642.6797 495.0483 L
f
652.875 495.0483 m
657.9014 495.0483 L
657.9014 498.5151 L
652.875 498.5151 L
652.875 495.0483 L
f
*U
*u
0 D
593.5762 129.4756 m
666.4619 141.7734 l
667.4648 141.9424 668.4229 141.2607 668.5918 140.2578 c
668.6523 139.9023 668.6055 139.5527 668.4746 139.2412 C
672.7441 139.1729 681.8213 139.002 685.9707 138.7285 c
691.498 138.3643 696.2568 136.9434 700.7041 132.2686 c
711.0332 121.4131 726.3213 108.2207 742.1172 104.957 c
744.5283 104.459 745.0029 101.1953 741.7334 101.8848 c
724.7168 105.4766 708.7314 118.9941 698.7568 130.3096 c
695.6621 133.8213 692.0771 136.1914 686.0615 136.3809 c
681.0117 136.541 669.8184 136.6523 666.3535 136.6846 C
667.1289 122.3691 L
669.1006 118.7656 672.1113 113.2783 672.5352 112.5996 c
673.1738 111.5781 673.8994 110.5547 674.9834 111.8496 c
678.4219 115.9551 680.5996 122.7627 681.125 128.7695 C
681.2949 130.7314 683.2529 130.5225 683.0273 128.0215 c
680.1904 96.5703 651.4053 96.4121 626.9238 96.2373 c
620.8945 96.1943 612.7793 94.0947 612.7754 86.7852 c
612.7686 73.0098 638.4375 78.6748 646.1582 80.4326 C
655.2402 82.501 665.5879 85.1172 676.6016 78.0342 c
681.7871 74.7002 691.0195 69.8906 698.5322 68.0127 c
706.0459 66.1338 701.1289 65.0293 696.709 65.7471 c
691.7002 66.5615 676.293 74.6494 674.2695 75.8408 c
672.7051 76.7617 671.1338 77.5264 669.5273 78.1348 C
671.0498 50.0771 L
619.3281 41.3506 L
594.9863 125.9639 L
594.1914 125.8291 l
593.1885 125.6602 592.2305 126.3418 592.0605 127.3447 c
591.8916 128.3477 592.5732 129.3066 593.5762 129.4756 c
593.5762 129.4756 l
f
619.0586 202.0889 m
625.457 202.0889 L
625.457 211.29 L
620.4746 212.042 616.5879 213.748 615.0615 215.8789 C
612.5898 215.8789 L
612.5898 219.9434 L
649.7617 219.9434 L
649.7617 215.8789 L
647.29 215.8789 L
645.7637 213.748 641.877 212.042 636.8955 211.29 C
636.8955 202.0889 L
643.293 202.0889 l
643.9424 202.0889 644.4746 201.5576 644.4746 200.9072 c
644.4746 171.3184 l
644.4746 170.668 643.9424 170.1367 643.293 170.1367 c
639.3438 170.1367 L
637.7637 150.0186 L
633.3721 150.0186 628.9805 150.0186 624.5879 150.0186 C
623.0078 170.1367 L
619.0586 170.1367 l
618.4092 170.1367 617.877 170.668 617.877 171.3184 c
617.877 200.9072 l
617.877 201.5576 618.4092 202.0889 619.0586 202.0889 c
619.0586 202.0889 l
f
1 D
667.3877 117.6084 m
668.0137 106.0596 L
669.041 106.5273 669.832 106.9473 670.2939 107.2764 c
672.4199 108.7949 672.1221 109.7461 671.4541 110.8398 c
671.0029 111.5762 669.0898 114.5547 667.3877 117.6084 C
f
*U
*u
0 D
231.9453 319.5664 m
303.1592 319.5664 l
304.2466 319.5664 305.1123 320.458 305.1357 321.543 c
305.8701 356.1152 L
306.0322 363.3379 314.3745 364.6689 319.124 364.2852 c
337.8911 362.7656 354.2017 362.9541 353.0645 382.5713 c
352.3647 394.6313 346.6421 408.8579 339.6704 418.6392 c
332.4868 428.7163 320.5576 433.5415 310.4443 423.98 c
309.0674 422.6787 307.3066 422.978 307.335 425.0107 C
307.6792 441.2197 L
307.7251 443.4189 309.5889 444.0439 309.5889 445.7725 c
309.5889 447.2354 308.3911 448.4312 306.9307 448.4312 c
228.1758 448.4312 l
226.7144 448.4312 225.5171 447.2354 225.5171 445.7725 c
225.5171 444.0439 227.3799 443.4165 227.4268 441.2197 c
229.9692 321.543 l
229.9922 320.46 230.8584 319.5664 231.9453 319.5664 c
231.9453 319.5664 l
f
306.3281 377.6279 m
306.748 397.3833 L
309.4917 397.9424 311.1411 399.7412 311.4282 402.1855 c
312.1963 408.7188 312.6064 418.0322 320.3584 420.9131 C
325.1006 422.6758 331.0156 419.7002 335.085 414.0747 c
339.7861 407.5762 346.7451 391.1924 346.8516 382.6719 C
346.9829 372.0166 339.7485 371.7725 330.5361 371.9785 c
322.4077 372.1602 320.042 372.7666 313.915 375.2539 c
309.5469 377.0264 307.918 377.584 306.3281 377.6279 C
f
*U
*u
419.3799 448.4312 m
416.7959 448.4312 416.4365 445.7119 417.2168 442.9756 c
428.2793 404.1802 429.8115 362.7969 429.8115 320.6055 c
429.8115 320.0342 430.2793 319.5664 430.8516 319.5664 c
491.8291 319.5664 l
492.4004 319.5664 492.8682 320.0342 492.8682 320.6055 c
492.8682 330.2363 492.9492 339.8232 493.2041 349.3477 C
496.624 349.7471 499.0059 351.9209 501.1689 357.5098 c
508.3965 376.1855 516.6699 387.5479 529.874 398.54 c
542.1582 408.7661 542.7158 421.8516 537.0488 430.0933 c
530.0469 440.2793 514.7734 441.293 507.7148 430.4424 c
505.3936 426.8726 503.7344 423.3618 500.4678 422.2715 C
501.8682 429.2461 503.5176 436.1509 505.4639 442.9756 c
506.2432 445.7119 505.8848 448.4312 503.3008 448.4312 c
419.3799 448.4312 l
419.3799 448.4312 l
f
493.8701 366.3848 m
494.5166 378.6436 495.5557 390.7739 497.1934 402.7305 C
503.0859 402.8379 504.6143 406.374 506.2617 412.8247 c
507.6045 418.0854 509.5811 423.1489 511.9658 426.6729 c
521.4512 440.6851 545.5508 422.1865 524.8633 402.2275 c
515.0488 392.7593 509.3457 387.7944 499.4912 368.0225 c
498.3145 365.6602 495.7705 365.8604 493.8701 366.3848 C
f
*U
*u
134.5083 448.4312 m
136.7085 448.4312 137.2681 447.1055 137.2681 444.9204 c
137.2681 437.9971 137.0161 430.8223 136.4482 423.5088 C
137.519 422.1992 139.2749 421.7554 140.6938 421.9814 c
157.563 424.6709 171.0903 415.5029 171.2559 398.1528 c
171.4385 378.96 152.3887 361.1943 136.2432 352.4053 C
132.7646 350.5117 126.0698 349.2061 121.3687 349.4336 C
119.7261 349.5137 118.4473 349.1357 117.3618 348.4795 C
112.5884 337.6572 109.2144 330.4365 107.3579 323.2725 c
106.8574 321.3438 105.7407 319.5664 103.4927 319.5664 c
85.7983 319.5664 80.1201 319.5664 62.4258 319.5664 c
60.1777 319.5664 59.0601 321.3438 58.561 323.2725 C
56.2495 332.1895 51.5869 341.1953 44.8003 357.127 c
32.6733 385.5957 28.6504 417.2681 28.6504 444.9204 c
28.6504 447.1055 29.21 448.4312 31.4102 448.4312 c
69.7817 448.4312 96.1367 448.4312 134.5083 448.4312 c
134.5083 448.4312 l
f
1 D
133.7925 401.6357 m
131.4434 387.6128 127.7603 373.4951 122.3213 360.0293 C
124.6816 358.6807 128.3892 358.6416 133.1997 360.5107 C
146.8872 365.8262 162.5552 381.3525 161.9097 396.916 C
161.2231 413.501 143.8589 416.2139 138.5884 405.0308 c
137.4883 402.6963 135.4922 401.958 133.7925 401.6357 C
f
*U
0 D
532.1348 89.4648 m
534.3604 84.209 L
534.8086 83.1543 534.4873 82.4961 533.5684 82.0234 C
535.1758 80.3662 535.2754 77.6318 533.7842 74.793 C
526.3799 60.7061 487.4736 43.6904 473.0117 39.2129 C
470.1934 38.3408 469.3682 40.8037 471.7656 41.6836 c
488.4121 47.7939 518.3027 61.2764 528.9824 73.957 C
533.7773 79.6514 530.6484 82.0508 527.0049 80.1211 C
523.248 78.1318 519.1973 76.9775 516.541 77.0342 C
511.4141 77.1436 510.8594 82.0879 514.9375 83.876 C
518.915 85.6182 535.7783 94.6104 540.5068 99.2344 C
545.5488 104.166 543.207 113.1016 535.1074 110.9971 c
532.8125 110.4014 523.5752 106.3027 517.9824 102.9814 C
511.0371 98.8594 504.333 105.2744 511.1934 110.2871 c
519.333 116.2354 526.9697 119.3369 532.6689 127.7617 C
539.6289 138.0508 529.6387 142.877 522.5625 139 c
519.8096 137.4912 513.6006 133.1807 508.7227 129.8408 C
504.6045 127.0225 502.1309 125.0557 498.6221 122.5811 c
491.1484 117.3115 485.7725 124.9619 491.8691 130.3926 c
498.3604 136.1748 511.0234 144.3525 515.4912 151.3398 C
520.6465 159.4014 511.9199 165.748 503.9463 160.0967 C
500.918 157.9512 490.4072 149.9473 485.8418 145.833 C
477.835 138.6152 464.418 128.9658 458.6631 120.585 C
454.5713 114.6221 446.7363 104.585 441.1104 100.8564 C
437.7275 98.6143 436.748 101.043 439.2695 102.9219 C
442.5938 105.3984 448.2031 112.1523 451.0566 116.5791 C
447.8945 124.0469 L
440.207 111.9678 431.6592 101.3633 422.0684 90.7549 C
417.9492 86.2002 415.6064 82.1045 413.917 77.3555 C
413.0811 75.0029 410.4746 76.2305 411.2471 78.3662 C
413.1738 83.6943 415.7373 87.8779 420.1465 93.1279 C
427.2646 101.6006 439.958 117.1016 446.0488 128.4043 C
416.8398 192.0576 L
415.8838 192.1328 415.041 192.7314 414.6689 193.6152 C
414.1191 194.9131 414.7314 196.4307 416.0322 196.9805 C
475.2324 222.0625 L
476.5332 222.6133 478.0479 221.998 478.5977 220.7002 C
478.9697 219.8164 478.8164 218.7969 478.2051 218.0566 C
501.3828 162.0801 L
502.5313 162.8418 503.6289 163.4863 504.6611 163.9775 C
514.3232 168.5752 525.083 160.1572 517.9512 149.6943 C
515.9307 146.7314 513.1885 143.9648 510.1563 141.3652 C
512.3965 136.0732 L
515.4619 138.1152 518.6777 140.0146 520.8145 141.1758 C
530.7998 146.6084 543.9355 140.0664 535.0703 125.8213 c
531.7295 120.4521 526.8672 116.8604 521.8438 113.7666 C
523.8916 108.9336 L
527.8936 110.8652 531.2109 112.6797 533.4307 113.4307 C
545.8135 117.6201 550.1514 104.4141 542.3516 96.666 C
539.9512 94.2832 536.1475 91.7588 532.1348 89.4648 C
f
313.8271 82.0586 m
312.2461 82.0586 309.9287 82.0273 V
312.6509 47.4072 l
313.3188 38.917 311.4106 34.9004 305.1699 34.4092 C
260.9917 30.9346 L
254.7495 30.4434 252.2368 34.1133 251.5693 42.6025 c
241.9312 165.1367 L
240.7559 180.0869 246.5786 195.6387 256.541 204.5264 C
259.6006 207.2559 259.3418 209.4033 259.2109 211.0801 C
259.0176 213.54 L
257.2847 213.4043 L
257.1621 214.9688 L
258.8931 215.1064 L
257.8916 227.8486 L
257.8438 228.4531 258.2993 228.9863 258.9048 229.0342 C
276.2593 230.3984 L
276.8652 230.4473 277.3984 229.9902 277.4463 229.3857 C
278.4482 216.6445 L
280.1807 216.7803 L
280.3037 215.2139 L
278.5713 215.0781 L
278.7656 212.6182 L
278.897 210.9414 278.9775 208.7803 282.4263 206.5625 C
293.6553 199.3398 301.8384 184.8906 303.0142 169.9414 C
304.6968 148.5498 L
311.3262 146.4072 314.0464 142.8027 321.2217 138.0977 C
327.502 133.9785 326.7324 128.1816 330.5273 124.3877 c
332.8618 122.0527 334.0942 118.3701 334.0518 113.8652 C
334.0112 109.3613 335.3867 105.2383 336.4946 102.6953 C
337.6016 100.1514 335.9077 99.46 334.7832 101.6982 C
332.9507 105.3418 331.8472 108.3896 331.7993 113.7607 C
331.75 119.1309 330.4463 121.5518 328.4712 123.6094 C
324.1436 128.1162 326.2217 132.624 318.771 137.3682 C
313.5684 140.6787 308.6807 145.2012 303.314 146.7441 C
294.418 149.3008 279.2168 146.7236 272.293 141.5996 c
267.2168 137.8428 269.7612 133.3945 275.395 133.2686 C
279.0586 133.1875 283.4395 134.168 287.0176 135.251 C
295.1582 137.7129 302.3862 135.8857 312.2798 130.0977 C
314.6074 128.7354 314.1016 127.46 311.2109 128.2041 C
290.8076 133.457 290.7168 128.9424 277.8774 128.3486 c
269.7227 127.9717 266.1543 126.4795 260.9751 122.2988 c
256.5303 118.71 255.9116 111.124 264.5596 111.8955 C
267.2358 112.1348 269.9941 112.874 271.7236 113.4238 c
282.7266 116.9189 299.8057 119.0205 311.0439 113.7373 C
312.4136 113.0947 313.2378 111.3838 311.5161 110.9277 C
309.8618 110.4902 304.2676 111.502 301.8027 111.8369 C
293.6538 112.9453 287.7813 110.2188 284.2363 108.7207 c
276.3535 105.3916 272.7852 107.2451 262.8667 101.291 C
255.6401 96.9541 259.9287 89.5635 268.3403 91.5498 C
273.0874 92.6689 278.6904 94.5811 282.6455 95.9004 C
286.6016 97.2178 290.8213 98.2734 294.7109 98.8662 c
298.6377 99.4648 309.4014 99.5928 313.6704 98.3379 C
315.6011 97.7715 315.792 95.1885 312.3442 95.3086 C
299.7119 95.749 296.4868 93.7295 285.251 91.167 c
280.7817 90.1484 273.0801 90.1455 269.793 87.6719 C
262.9009 82.4824 268.0322 77.2471 278.6753 79.7666 C
285.6021 81.4053 306.0991 84.3291 313.4302 83.6494 C
316.0825 83.4053 315.7393 82.0781 313.8271 82.0586 C
f
144.272 72.96 m
146.0024 74.8994 147.1167 77.2393 147.6016 80.2705 c
147.8325 81.7158 147.9375 83.1689 147.9434 84.6074 C
152.1221 87.3857 159.5186 91.9795 159.8647 97.4941 c
160.1665 102.2998 156.6006 107.1035 152.1699 107.8984 c
149.4907 108.3799 146.4233 107.2695 143.1006 104.9824 C
141.0073 110.54 139.2153 115.1338 136.9009 120.8809 C
140.9907 123.8164 143.6948 127.6094 141.8179 132.5059 c
139.8496 137.6406 135.042 139.6719 129.8252 137.999 C
121.3032 158.1338 111.2144 180.3555 97.7339 209.4473 C
48.0122 191.457 L
55.8213 162.1543 62.1772 139.0244 68.2031 118.8984 C
64.4004 119.9619 61.356 118.2627 62.2866 114.9922 c
65.3101 104.3633 62.542 95.9941 52.7354 90.6055 c
48.1782 88.1016 46.0195 86.0176 45.9229 81.0039 c
45.7124 70.1104 41.9375 58.1865 40.2363 53.8096 c
39.3374 51.4961 41.5425 51.1738 42.356 53.125 c
46.4175 62.8672 48.0654 70.0322 48.6001 80.498 c
48.853 85.4482 50.6113 86.2305 54.5029 88.3789 c
64.7964 94.0625 68.9028 102.332 65.106 114.0811 c
64.1226 117.124 67.2778 116.6006 69.0342 116.1338 C
71.8569 106.7744 74.4795 98.5059 77.292 90.0928 C
76.5815 89.2861 76.1631 88.7979 Y
74.9834 87.6543 75.2466 85.9971 76.1543 86.2412 c
77.0615 86.4863 78.0674 87.7842 82.6963 92.4541 c
87.3247 97.123 90.9199 100.4668 95.7241 104.0762 c
100.5283 107.6855 101.5742 110.1309 105.9434 115.9473 c
110.9321 122.5889 122.353 132.6836 130.3525 135.4902 c
131.6216 135.9355 132.6445 136.1309 133.4126 136.1465 c
138.7466 136.2549 142.4756 128.4365 137.1782 124.3086 c
127.9238 117.0957 115.792 107.2354 113.2207 97.2129 c
112.0308 92.5752 115.3994 87.335 120.8887 89.0439 c
126.8442 90.9004 141.7407 100.3135 146.6431 103.8789 c
152.1694 107.8984 160.9287 100.4609 155.6265 93.667 c
152.9448 90.2314 148.8809 87.8965 145.2534 85.5273 c
139.6226 81.8506 133.1411 77.7295 130.9448 76.6182 c
125.9258 74.0781 125.499 68.7412 131.1475 67.5078 c
135.1553 66.6328 139.0767 67.8623 142.5229 69.79 c
144.584 70.9434 146.1729 71.1826 148.2622 71.0146 c
152.938 70.6396 157.127 62.9844 152.2017 57.4229 c
150.1216 55.0732 151.9805 53.9922 153.9053 55.9424 c
162.1104 64.2549 152.3467 75.9883 144.272 72.96 C
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
